-- give all emps that work in electronic devision
select first_name, department 
from employees
where department in (
					select department 
					from departments 
					where division = 'Electronics');
					
					
-- give employees that work in asia or canada and make over 130k
select *
from employees
where region_id 
	  in(select region_id from regions 
		where country in ('Asia','Canada'))
and salary > 130000;
		
-- give first_name and department aling with how much less they make from the max salary
select first_name, department, (select max(salary) from employees) - salary as sal_diff
from employees;

-- employees that work in kids division and
-- the dates of hire is greater than all the hire dates of employees who work in 
-- maintainance department

select *
from employees
where department in (select department from departments 
				   where division = 'Kids')
AND hire_date > ALL(select hire_date 
					from employees 
					where department = 'Maintenance');

-- give those salaries that appears very frequently
select salary
from employees
group by salary
order by count(*) desc, salary desc
limit 1;

-- compute average salary but ignore the min and max salary
select round(avg(salary))
from employees
where employee_id != (
					select min(employee_id)
					from employees
					group by salary
					order by salary
					limit 1)
AND employee_id != (
					select min(employee_id)
					from employees
					group by salary
					order by salary desc
					limit 1);

-- another way to do this
select round(avg(salary))
from employees
where salary not in (
(select min(salary) from employees),
(select max(salary) from employees)
);

-- Using subqueries only, write a SQL statement that returns the names of those 
-- students that are taking the courses Physics and US History.

select * 
from students
where student_no in (
					select student_no 
					from student_enrollment
					where course_no in (
										select course_no 
										from courses
										where course_title in ('Physics', 'US History')));


-- Using subqueries only, write a query that returns the name of the student that is 
-- taking the highest number of courses.

select * 
from students
where student_no = (select student_no 
					from student_enrollment
					group by student_no
					order by count(*) desc
					limit 1);


-- Write a query to find the student that is the oldest. 
-- You are not allowed to use LIMIT or the ORDER BY clause to solve this problem.
select * 
from students 
where age = (select max(age)
			from students);
